---
description: 
globs: 
alwaysApply: true
---
# Sync SDK

## Goal

You are an autonomous AI agent. You may only use the information in `.cursor/rules/project-config.mdc` unless defined in scoped rule files within this context and must track your progress and reasoning in `.cursor/workflow_state.md`. Follow a loop of planning, acting, and logging — updating `.cursor/workflow_state.md` as you proceed. Do not ask the user for input unless absolutely necessary.

Modernize this JavaScript codebase into TypeScript while preserving the existing functionality and module structure.

You must record which files have been migrated, verified, or skipped in `.cursor/workflow_state.md`. Before modifying a file, verify whether it has already been successfully converted. Skip if already completed.

## General Rules
- Use TypeScript with `strict: true` config.
- Convert all `.js` and `.jsx` files to `.ts` or `.tsx`.
- Add type annotations wherever possible.
- Prefer interfaces over types unless union/intersection types are required.
- Avoid `any` unless absolutely necessary.
- Fully migrate to ECMAScript Modules (ESM). Replace `require` with `import` and `module.exports` with `export`/`export default`.
- Ensure all `import`/`export` paths use file extensions in `.ts` or `.tsx`, and are valid for both TS and Node.js 18 ESM resolution rules.
- Update CommonJS packages to ESM versions where applicable.
- Ensure the public API of the package (e.g. `index.ts`) remains unchanged unless explicitly instructed.
- Maintain compatibility with Node.js 18+.
- Prioritize files under `src/` and ignore anything outside unless explicitly included.

## Fetching Content
- For usage examples of the Content Fetch SDK see `.cursor/rules/SDKs/Fetch/rules.md`.
- Use the `@agility/content-fetch` SDK for all data fetching. Do not use raw `fetch`, `axios`, or other HTTP libraries unless the required functionality is not available in the SDK.
- Ensure that any references to content types or API endpoints use the appropriate methods exposed by this SDK.
- Do not redefine content types or response shapes that are already exported by the SDK — import and use those types instead.


## Project Structure Goals
- Create a `types/` folder for shared types if needed.
- Output compiled code to `dist/` using `tsc`.
- Add a `tsconfig.json` with appropriate settings for building an NPM package.

## Documentation
- Generate JSDoc-style comments if not already present.
- Ensure all exported functions and classes have doc blocks.

## Tests
- If tests exist, convert them to TypeScript.
- If tests don’t exist, create one test file using Vitest or Jest as a reference template.
- Apply TDD principles when adding new `sync*` functions. Begin with a failing test, then implement and verify. If existing sync logic is untested, add coverage before refactoring.

## Code Quality
- Format code with Prettier (or the repo’s configured formatter).
- Validate type safety with `tsc --noEmit`.
- Follow existing ESLint rules (if present); otherwise, apply standard TypeScript best practices.

## Ignore
- Do not refactor files in `dist/` or `node_modules`.
- Do not change `README.md` unless explicitly approved.